---
description: "Definition of the SIMD TargetExtension neon."
vendor: "arm"
extension_name: "neon"
lscpu_flags: ["neon","asimd"]
arch_flags: {neon: "arch=native", asimd: "arch=native"}
synonym_flags: {asimd: "neon"}
includes: ['<arm_neon.h>']
simdT_name: "neon"
simdT_default_size_in_bits: 128
simdT_register_type: |-
   TSL_DEP_TYPE(
                     std::is_integral_v< BaseType >,
                     TSL_DEP_TYPE(
                        std::is_unsigned_v< BaseType >,
                        TSL_DEP_TYPE(
                           (sizeof( BaseType ) == 1),
                           uint8x16_t,
                           TSL_DEP_TYPE(
                              (sizeof( BaseType ) == 2),
                              uint16x8_t,
                              TSL_DEP_TYPE(
                                 (sizeof( BaseType ) == 4),
                                 uint32x4_t,
                                 uint64x2_t
                              )
                           )
                        ),
                        TSL_DEP_TYPE(
                           (sizeof( BaseType ) == 1),
                           int8x16_t,
                           TSL_DEP_TYPE(
                              (sizeof( BaseType ) == 2),
                              int16x8_t,
                              TSL_DEP_TYPE(
                                 (sizeof( BaseType ) == 4),
                                 int32x4_t,
                                 int64x2_t
                              )
                           )
                        )
                     ),
                     TSL_DEP_TYPE(
                        (sizeof( BaseType ) == 4),
                        float32x4_t,
                        float64x2_t
                     )
                  )
simdT_mask_type: |-
   TSL_DEP_TYPE(
                     (sizeof( BaseType ) == 1),
                     uint8x16_t,
                     TSL_DEP_TYPE(
                        (sizeof( BaseType ) == 2),
                        uint16x8_t,
                        TSL_DEP_TYPE(
                           (sizeof( BaseType ) == 4),
                           uint32x4_t,
                           uint64x2_t
                        )
                     )
                  )
simdT_integral_mask_type: |-
   TSL_DEP_TYPE(
                     (sizeof(BaseType)==1),
                     uint16_t,
                     uint8_t
                  )
intrin_tp: {uint8_t: ["u", 8], uint16_t: ["u", 16], uint32_t: ["u", 32], uint64_t: ["u", 64], int8_t: ["s", 8], int16_t: ["s", 16], int32_t: ["s", 32], int64_t: ["s", 64], float: ["f", 32], double: ["f", 64]}
intrin_tp_full: {uint8_t: "u8", uint16_t: "u16", uint32_t: "u32", uint64_t: "u64", int8_t: "s8", int16_t: "s16", int32_t: "s32", int64_t: "s64", float: "f32", double: "f64"}
intrin_tp_mask_full: {uint8_t: "u8", uint16_t: "u16", uint32_t: "u32", uint64_t: "u64", int8_t: "s8", int16_t: "s16", int32_t: "s32", int64_t: "s64", float: "u32", double: "u64"}
simdT_mask_base_type_mapping: {
  uint8_t: "uint8_t",
  uint16_t: "uint16_t",
  uint32_t: "uint32_t",
  uint64_t: "uint64_t",
  int8_t: "uint8_t",
  int16_t: "uint16_t",
  int32_t: "uint32_t",
  int64_t: "uint64_t",
  float: "uint32_t",
  double: "uint64_t"
}
...
