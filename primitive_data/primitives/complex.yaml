---
name: "complex"
description: "Complex (composed) primitives that are highly application specific."
...
---
primitive_name: "unpack_acint"
brief_description: "Unpacks a coherent AC_INT."
detailed_description: |
  Takes an AC_INT as input (<data>).
  The AC_INT is assumed to be packed with <Bitwidth> wide data elements.
  unpack_acint returns an AC_INT with Vec::vector_element_count() elements of type <Vec::base_type>
  starting to read from <data> at position <BitReadOffset>.
  Example 1: (Default Case)
    AC_INT bitwidth = 128
    data = 0b...001 010 011 100 101
    Bitwidth = 3
    BitReadOffset = 0
    Vec::vector_element_count() = 4
    sizeof(Vec::base_type) = 4 (int)
    result = <0x00000002 0x00000003 0x00000004 0x00000005>
  Example 1: (Carry Case - Greedy reading)
    AC_INT bitwidth = 128
    data = 0b00 101 001 110 010 1...
    Bitwidth = 3
    BitReadOffset = 120
    Vec::vector_element_count() = 4
    sizeof(Vec::base_type) = 4 (int)
    --> relevant bits from data 0b00 101 001
    result = <0x0000000 0x00000000 0x00000005 0x00000001>
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "Bitwidth"
    default_value: "1"
  - ctype: "int"
    name: "BitReadOffset"
    default_value: "0"
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC Int containing packed N bits of data."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing unpacked data of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>", "<type_traits>"]
    implementation: |
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      using element_t = ac_int<Bitwidth, false>;
      BigIntT result;
      result.template set_val<AC_VAL_0>();
      /**
       * read_count_t: number of elements from data that can be used to fully fill the corresponding values in result.
       */
      using read_count_t = std::conditional_t<
        (Vec::vector_size_b() - BitReadOffset) >= (Bitwidth * Vec::vector_element_count()),
        std::integral_constant<int, Vec::vector_element_count()>,
        std::integral_constant<int, (Vec::vector_size_b() - BitReadOffset) / Bitwidth>
      >;
      using partial_read_bits_count_t = std::conditional_t<
        (Vec::vector_size_b() - BitReadOffset) >= (Bitwidth * Vec::vector_element_count()),
        std::integral_constant<int, 0>,
        std::integral_constant<int, (Vec::vector_size_b() - (read_count_t::value * Bitwidth + BitReadOffset))>
      >;
      if constexpr (read_count_t::value > 0) {
        TSL_UNROLL(read_count_t::value)
        for (auto idx = 0; idx < read_count_t::value; ++idx) {
          element_t element = data.template slc<Bitwidth>((unsigned)(idx*Bitwidth + BitReadOffset));
          result.set_slc((unsigned)(idx*CHAR_BIT*sizeof(typename Vec::base_type)), element);
        }
      }
      if constexpr (partial_read_bits_count_t::value != 0) {
        using partial_element_t = ac_int<partial_read_bits_count_t::value, false>;
        partial_element_t element = data.template slc<partial_read_bits_count_t::value>((unsigned)(read_count_t::value*Bitwidth + BitReadOffset));
        result.set_slc((unsigned)(read_count_t::value*CHAR_BIT*sizeof(typename Vec::base_type)), element);
      }
      return result;
...
---
primitive_name: "unpack_merge_acint"
brief_description: ""
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "Bitwidth"
    default_value: "1"
  - ctype: "int"
    name: "BitWriteOffset"
    default_value: "0"
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "source"
    description: "AC Int containing unpacked data from previous step."
  - ctype: "ac_int<Vec::vector_size_b(), false> const"
    name: "data"
    description: "AC Int containing packed N bits of data."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing unpacked data of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>", "<type_traits>"]
    implementation: |
      // Element Size in bits: e.g., uint32_t -> 32
      using element_size_b = std::integral_constant<int, CHAR_BIT * sizeof(typename Vec::base_type)>;
      using most_significant_set_value_idx_t =
        std::integral_constant<int, BitWriteOffset / element_size_b::value>;
      using full_bit_write_offset =
        std::integral_constant<int, (most_significant_set_value_idx_t::value + 1) * element_size_b::value>;
      using most_significant_set_value_bits_written_t =
        std::integral_constant<int, BitWriteOffset - (most_significant_set_value_idx_t::value * element_size_b::value)>;

      static_assert(most_significant_set_value_bits_written_t::value % Bitwidth != 0, "MS value bits must not be a multiple of bitwidth");
      static_assert((most_significant_set_value_idx_t::value + 1) <= Vec::vector_element_count(), "Remainder must be smaller than vector element count.");

      using read_offset_t =
        std::integral_constant<int, Bitwidth - most_significant_set_value_bits_written_t::value>;

      using carry_t = ac_int<read_offset_t::value, false>;

      carry_t carry_element = data.template slc<read_offset_t::value>((unsigned)0);
      source.set_slc((unsigned)(BitWriteOffset), carry_element);

      using write_remainder_t =
        std::integral_constant<int, Vec::vector_element_count() - (most_significant_set_value_idx_t::value + 1)>;

      if constexpr (write_remainder_t::value > 0) {
        TSL_UNROLL(write_remainder_t::value)
        for (auto idx = 0; idx < write_remainder_t::value; ++idx) {
          auto element = data.template slc<Bitwidth>((unsigned)(idx * Bitwidth + read_offset_t::value));
          source.set_slc((unsigned)(idx * element_size_b::value + full_bit_write_offset::value), element);
        }
      }
      return source;
...
---
primitive_name: "load_acint"
brief_description: "Loads consecutive data from memory into a coherent AC_INT."
parameters:
  - ctype: "const typename Vec::base_type*"
    name: "memory"
    description: "Pointer to memory."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      BigIntT result;
      result.template set_val<AC_VAL_0>();
      using ElementT = ac_int<CHAR_BIT*sizeof(typename Vec::base_type), false>;
      TSL_UNROLL(Vec::vector_element_count())
      for (auto idx = 0; idx < Vec::vector_element_count(); ++idx) {
        ElementT element = memory[idx];
        result.set_slc((unsigned)(idx*CHAR_BIT*sizeof(typename Vec::base_type)), element);
      }
      return result;
...
---
primitive_name: "append_acint"
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "BitWriteOffset"
    default_value: "0"
  - ctype: "int"
    name: "BitReadOffset"
    default_value: "0"
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "source"
  - ctype: "ac_int<Vec::vector_size_b(), false> const"
    name: "data"
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      using bit_read_count_t = std::integral_constant<
        int,
        ((Vec::vector_size_b()-BitWriteOffset) <= (Vec::vector_size_b()-BitReadOffset))
        ? (Vec::vector_size_b()-BitWriteOffset) : (Vec::vector_size_b()-BitReadOffset)
      >;
      using slice_t = ac_int<bit_read_count_t::value, false>;
      slice_t slice = data.template slc<bit_read_count_t::value>((unsigned)BitReadOffset);
      source.set_slc((unsigned)BitWriteOffset, slice);
      return source;
...
---
primitive_name: "packed_load_acint"
brief_description: "Loads data from memory and packs n-bits from all elements within a vector together."
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "Bitwidth"
    default_value: "1"
parameters:
  - ctype: "const typename Vec::base_type*"
    name: "memory"
    description: "Pointer to memory."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      static_assert((Bitwidth <= (sizeof(typename Vec::base_type)*CHAR_BIT)), "Bitwidth must be smaller or equal to the number of bits in the vector's base type.");
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      BigIntT result;
      result.template set_val<AC_VAL_0>();
      using ElementT = ac_int<CHAR_BIT*sizeof(typename Vec::base_type), false>;
      using SliceT = ac_int<Bitwidth, false>;
      TSL_UNROLL(Vec::vector_element_count())
      for (auto idx = 0; idx < Vec::vector_element_count(); ++idx) {
        ElementT element = memory[idx];
        SliceT slice = element.template slc<Bitwidth>((unsigned)0);
        result.set_slc((unsigned)(idx*Bitwidth), slice);
      }
      return result;
...
---
primitive_name: "packed_store_acint"
brief_description: "stores N bit of data. N must be a multiple of sizeof(Vec::base_type)."
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "EffectiveBits"
    default_value: "1"
parameters:
  - ctype: "typename Vec::base_type*"
    name: "memory"
    description: "Aligned memory where the data should be stored into."
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      static_assert(EffectiveBits % (sizeof(typename Vec::base_type)*CHAR_BIT) == 0, "EffectiveBits must be a multiple of sizeof(T)*8.");
      static_assert(EffectiveBits <= Vec::vector_size_b(), "EffectiveBits must be smaller or equal to vector size in bits.");
      TSL_UNROLL((EffectiveBits / (sizeof(typename Vec::base_type)*CHAR_BIT)))
      for (auto idx = 0; idx < (EffectiveBits / (sizeof(typename Vec::base_type)*CHAR_BIT)); ++idx) {
        memory[idx] = data.template slc<sizeof(typename Vec::base_type)*CHAR_BIT>((unsigned)(idx*sizeof(typename Vec::base_type)*CHAR_BIT));
      }
...
---
primitive_name: "store_acint"
brief_description: ""
parameters:
  - ctype: "typename Vec::base_type*"
    name: "memory"
    description: "Aligned memory where the data should be stored into."
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      TSL_UNROLL(Vec::vector_element_count())
      for (auto idx = 0; idx < Vec::vector_element_count(); ++idx) {
        memory[idx] = data.template slc<sizeof(typename Vec::base_type)*CHAR_BIT>((unsigned)(idx*sizeof(typename Vec::base_type)*CHAR_BIT));
      }
...
---
primitive_name: "packed_shift_left_acint"
brief_description: ""
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC_INT containing the source data."
  - ctype: "int"
    name: "shift_value"
    description: "Value to be shifted."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      return data << shift_value;
...
---
primitive_name: "slice_packed_shift_left_acint_by_N"
brief_description: ""
additional_non_specialized_template_parameters:
  - ctype: "unsigned"
    name: "ShiftValue"
    default_value: "1"
  - ctype: "unsigned"
    name: "ReadOffset"
    default_value: "0"
  - ctype: "unsigned"
    name: "EffectiveBits"
    default_value: "1"
  - ctype: "bool"
    name: "PreserveRemainder"
    default_value: "false"
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC_INT containing the source data."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      using normalized_effective_bits_t = std::integral_constant<
        unsigned,
        (Vec::vector_size_b() < (ReadOffset+ShiftValue+EffectiveBits)) ?
        Vec::vector_size_b() - (ReadOffset+ShiftValue) : EffectiveBits
      >;
      ac_int<normalized_effective_bits_t::value, false> slice = data.template slc<normalized_effective_bits_t::value>((unsigned)ReadOffset);
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      BigIntT result;
      result.template set_val<AC_VAL_0>();
      if constexpr (PreserveRemainder) {
        ac_int<ReadOffset, false> front = data.template slc<ReadOffset>(0);
        ac_int<Vec::vector_size_b() - ReadOffset - ShiftValue - normalized_effective_bits_t::value, false> tail =
          data.template slc<Vec::vector_size_b() - ReadOffset - ShiftValue - normalized_effective_bits_t::value>(ReadOffset+ShiftValue+normalized_effective_bits_t::value);
        result.set_slc(0, front);
        result.set_slc((unsigned)ReadOffset + ShiftValue, slice);
        result.set_slc((unsigned)ReadOffset + ShiftValue + normalized_effective_bits_t::value, tail);
        return result;
      } else {
        result.set_slc((unsigned)ReadOffset + ShiftValue, slice);
        return result;
      }
...
---
primitive_name: "packed_shift_right_acint"
brief_description: ""
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC_INT containing the source data."
  - ctype: "int"
    name: "shift_value"
    description: "Value to be shifted."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      return data >> shift_value;
...
---
primitive_name: "slice_packed_shift_right_acint_by_N"
brief_description: ""
additional_non_specialized_template_parameters:
  - ctype: "unsigned"
    name: "ShiftValue"
    default_value: "1"
  - ctype: "unsigned"
    name: "ReadOffset"
    default_value: "0"
  - ctype: "unsigned"
    name: "EffectiveBits"
    default_value: "1"
  - ctype: "bool"
    name: "PreserveRemainder"
    default_value: "false"
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "data"
    description: "AC_INT containing the source data."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      using normalized_read_offset_t = std::integral_constant<
        unsigned,
        (ReadOffset < ShiftValue) ?
        ReadOffset + (ShiftValue - ReadOffset) : ReadOffset
      >;
      using normalized_effective_bits_t = std::integral_constant<
        unsigned,
        (ReadOffset != normalized_read_offset_t::value) ?
        EffectiveBits - (ShiftValue - ReadOffset) : EffectiveBits
      >;
      using write_offset_t = std::integral_constant<
        unsigned,
        normalized_read_offset_t::value - ShiftValue
      >;
      ac_int<normalized_effective_bits_t::value, false> slice = data.template slc<normalized_effective_bits_t::value>((unsigned)normalized_read_offset_t::value);
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      BigIntT result;
      result.template set_val<AC_VAL_0>();
      if constexpr (PreserveRemainder) {
        ac_int<write_offset_t::value, false> front = data.template slc<write_offset_t::value>(0);
        ac_int<Vec::vector_size_b() - ReadOffset - EffectiveBits> tail =
          data.template slc<Vec::vector_size_b() - ReadOffset - EffectiveBits>(ReadOffset + EffectiveBits);
        result.set_slc(0, front);
        result.set_slc((unsigned)write_offset_t::value, slice);
        result.set_slc((unsigned)ReadOffset + EffectiveBits, tail);
        return result;
      } else {
        result.set_slc((unsigned)write_offset_t::value, slice);
        return result;
      }
...
---
primitive_name: "packed_or_acint"
brief_description: ""
parameters:
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "a"
    description: "AC_INT containing the first source data."
  - ctype: "ac_int<Vec::vector_size_b(), false>"
    name: "b"
    description: "AC_INT containing the second source data."
returns:
  ctype: "ac_int<Vec::vector_size_b(), false>"
  description: "AC Int containing packed N bits of data."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
    implementation: |
      return a | b;
...

# ---
# primitive_name: "bitcompress_merge_nocarry"
# brief_description: "Packs n-bits from all elements within a vector together."
# additional_non_specialized_template_parameters:
#   - ctype: "int"
#     name: "Bitwidth"
#     default_value: "1"
#   - ctype: "int"
#     name: "InsertStartPos"
#     default_value: "0"
# parameters:
#   - ctype: "const typename Vec::register_type"
#     name: "data"
#     description: "Data vector."
#   - ctype: "ac_int<Vec::vector_size_b(), false>"
#     name: "src"
#     description: "AC INT containing the source data."
# returns:
#   ctype: "ac_int<Vec::vector_size_b(), false>"
#   description: "Vector containing packed elements."
# definitions:
#   - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
#     ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
#     lscpu_flags: ["oneAPIfpgaDev"]
#     vector_length_agnostic: True
#     includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
#     implementation: |
#       using BigIntT = ac_int<Vec::vector_size_b(), false>;
#       using ElementT = ac_int<CHAR_BIT*sizeof(typename Vec::base_type), false>;
#       auto element_count_fun = []() constexpr -> int {
#         return ((Vec::vector_size_b() - InsertStartPos) / Bitwidth) >= (Vec::vector_element_count()) ? Vec::vector_element_count() : ((Vec::vector_size_b() - InsertStartPos) / Bitwidth);
#       };
#       TSL_UNROLL(element_count_fun())
#       for (auto idx = 0; idx < element_count_fun(); ++idx) {
#         ElementT element = data[idx];
#         auto slice = element.template slc<Bitwidth>(0);
#         src.set_slc(idx*Bitwidth + InsertStartPos, slice);
#       }
#       if constexpr ((Vec::vector_size_b() - (InsertStartPos + (element_count_fun()*Bitwidth)) < Bitwidth)) && (element_count_fun() < Vec::vector_element_count()) {
#         ElementT element = data[element_count_fun()];
#         auto slice = element.template slc<Vec::vector_size_b() - (InsertStartPos + (element_count_fun()*Bitwidth))>(0);
#         src.set_slc(element_count_fun()*Bitwidth + InsertStartPos, slice);
#       }
#       return src;
# ...
# ---
# primitive_name: "bitcompress_merge_withcarry"
# brief_description: "Packs n-bits from all elements within a vector together."
# additional_non_specialized_template_parameters:
#   - ctype: "int"
#     name: "Bitwidth"
#     default_value: "1"
#   - ctype: "int"
#     name: "InsertStartPos"
#     default_value: "0"
# parameters:
#   - ctype: "const typename Vec::register_type"
#     name: "data"
#     description: "Data vector."
#   - ctype: "ac_int<Vec::vector_size_b(), false>"
#     name: "src"
#     description: "AC INT containing the source data."
# returns:
#   ctype: "std::pair<ac_int<Vec::vector_size_b(), false>, ac_int<Vec::vector_size_b(), false>"
#   description: "Vector containing packed elements."
# definitions:
#   - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
#     ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
#     lscpu_flags: ["oneAPIfpgaDev"]
#     vector_length_agnostic: True
#     includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>", "<climits>"]
#     implementation: |
#       using BigIntT = ac_int<Vec::vector_size_b(), false>;
#       using ElementT = ac_int<CHAR_BIT*sizeof(typename Vec::base_type), false>;
#       auto element_count_fun = []() constexpr -> int {
#         return ((Vec::vector_size_b() - InsertStartPos) / Bitwidth) >= (Vec::vector_element_count()) ? Vec::vector_element_count() : ((Vec::vector_size_b() - InsertStartPos) / Bitwidth);
#       };
#       TSL_UNROLL(element_count_fun())
#       for (auto idx = 0; idx < element_count_fun(); ++idx) {
#         ElementT element = data[idx];
#         auto slice = element.template slc<Bitwidth>(0);
#         src.set_slc(idx*Bitwidth + InsertStartPos, slice);
#       }
#       if constexpr ((Vec::vector_size_b() - (InsertStartPos + (element_count_fun()*Bitwidth)) < Bitwidth)) && (element_count_fun() < Vec::vector_element_count()) {
#         ElementT element = data[element_count_fun()];
#         auto slice = element.template slc<Vec::vector_size_b() - (InsertStartPos + (element_count_fun()*Bitwidth))>(0);
#         src.set_slc(element_count_fun()*Bitwidth + InsertStartPos, slice);
#         BigIntT carry;
#         // carry.set_val<AC_VAL_0>();
#         auto slice_carry = element.template slc<Vec::vector_size_b() - (InsertStartPos + (element_count_fun()*Bitwidth))>(0);
#         src.set_slc(element_count_fun()*Bitwidth + InsertStartPos, slice);
#         return src;
#       } else {

#       }
# ...
---
primitive_name: 'pack_bits_linear'
brief_description: 'Packs elements from a vector together using a fixed bitwidth.'
detailed_description: |
  Packs elements from a vector together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
parameters:
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "typename Vec::register_type"
  description: "Vector containing packed elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      // we must not use std::is_signed_v<T> for the ac_int, since we don't want the sign bit to be populated.
      using BigIntT = ac_int<Vec::vector_size_b(), false>;//std::is_signed_v<T>>;
      BigIntT tmp_result{0};
      TSL_UNROLL(Vec::vector_element_count())
      for (unsigned i = 0; i < Vec::vector_element_count(); ++i) {
        tmp_result |=  (BigIntT{data[i]}) << (bitwidth*i);
      }
      typename Vec::register_type result{};
      TSL_UNROLL(Vec::vector_element_count())
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = tmp_result.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
      }
      return result;
...
---
primitive_name: 'pack_bits_treelike'
brief_description: 'Packs elements from a vector together using a fixed bitwidth.'
detailed_description: |
  Packs elements from a vector together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
  Example: Assuming 8 values in vector, bitwidth=3
    result = data
    stage=1, i=0, bitwidth=3: result[ 8] = (result[ 0]) | (result[ 1] <<  3) ==> ([0: 5] filled)
    stage=1, i=1, bitwidth=3: result[ 9] = (result[ 2]) | (result[ 3] <<  3) ==> ([0: 5] filled)
    stage=1, i=2, bitwidth=3: result[10] = (result[ 4]) | (result[ 5] <<  3) ==> ([0: 5] filled)
    stage=1, i=3, bitwidth=3: result[11] = (result[ 6]) | (result[ 7] <<  3) ==> ([0: 5] filled)

    stage=2, i=0, bitwidth=3: result[12] = (result[ 8]) | (result[ 9] <<  6) ==> ([0:11] filled)
    stage=2, i=1, bitwidth=3: result[13] = (result[10]) | (result[11] <<  6) ==> ([0:11] filled)

    stage=3, i=0, bitwidth=3: result[14] = (result[12]) | (result[13] << 12) ==> ([0:23] filled)

    return result[2*Vec::vector_element_count()-2];
parameters:
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "typename Vec::register_type"
  description: "Vector containing packed elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      using UnsignedT = std::make_unsigned_t<T>;
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      //we are wasting some space here, but it is easier to implement (and maybe even more efficient)
      BigIntT tmp_result[Vec::vector_element_count()];
      TSL_UNROLL((Vec::vector_element_count()>>1))
      for (unsigned int i = 0; i < (Vec::vector_element_count()>>1); ++i) {
        tmp_result[i] = BigIntT{(UnsignedT)data[(i<<1)]} | (BigIntT{(UnsignedT)data[(i<<1)+1]} << bitwidth);
      }
      unsigned current_result_position = Vec::vector_element_count()>>1;
      unsigned previous_stage_start_idx = 0;
      unsigned current_stage = 1;
      TSL_UNROLL(cilog2((Vec::vector_element_count()>>1)))
      for(size_t current_upper_idx = (Vec::vector_element_count()>>2); current_upper_idx >= 1; current_upper_idx>>=1) {
          TSL_UNROLL(current_upper_idx)
          for(size_t i = 0; i < current_upper_idx; ++i) {
            tmp_result[current_result_position + i] =
                tmp_result[previous_stage_start_idx + (i<<1)] | (tmp_result[previous_stage_start_idx + (i<<1)+1] << (bitwidth<<current_stage));
          }
          current_result_position += current_upper_idx;
          previous_stage_start_idx += current_upper_idx<<1;
          ++current_stage;
      }
      BigIntT tmp_result_int = tmp_result[Vec::vector_element_count()-2];
      typename Vec::register_type result{};
      TSL_UNROLL(Vec::vector_element_count())
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = tmp_result_int.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
      }
      return result;
...
---
primitive_name: "pack_bits_linear_merge"
brief_description: ""
detailed_description: |
  Packs elements from two vector registers together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
  The 'src' operand is assumed to be packed already. The 'bit_offset' parameter indicates
  the bit offset of the last set bit in the 'src' operand. The 'data' operand is packed
  and merged with the 'src' operand. The 'bitwidth' parameter indicates the bitwidth of
  each element in the 'data' operand.
parameters:
  - ctype: "const typename Vec::register_type"
    name: "src"
    description: "Source register which is used for merging (assumed to be packed already)."
  - ctype: "const unsigned"
    name: "bit_offset"
    description: "Bit offset of the last set bit."
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "std::tuple<typename Vec::register_type, int, typename Vec::register_type>"
  description: "Tuple containing the merged vector, an int indicating whether the data vector had an overflow (-1: false, >=0 new offset) and the overflow."
  # description: "Vector containing packed and merged elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<tuple>", "<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      using UnsignedT = std::make_unsigned_t<T>;
      using BigIntT = ac_int<Vec::vector_size_b(), false>;

      BigIntT packed_data{0};
      TSL_UNROLL(Vec::vector_element_count())
      for (unsigned i = 0; i < Vec::vector_element_count(); ++i) {
        packed_data |=  (BigIntT{(UnsignedT)data[i]}) << (bitwidth*i);
      }
      BigIntT packed_data_shifted = packed_data << bit_offset;
      typename Vec::register_type result{};
      TSL_UNROLL(Vec::vector_element_count())
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = src[i] | (T)(packed_data_shifted.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT))));
      }
      // check for overflow
      auto new_bitwidth = (bit_offset + bitwidth * Vec::vector_element_count());
      if (new_bitwidth >= Vec::vector_size_b()) {
        new_bitwidth -= Vec::vector_size_b();
        packed_data >>= (bitwidth * Vec::vector_element_count() - new_bitwidth);
        typename Vec::register_type overflow_result{};
        TSL_UNROLL(Vec::vector_element_count())
        for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
          overflow_result[i] = packed_data.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
        }
        return std::make_tuple(result, new_bitwidth, overflow_result);
      }
      return std::make_tuple(result, -1, data);
...
---
primitive_name: "pack_bits_treelike_merge"
brief_description: ""
detailed_description: |
  Packs elements from two vector registers together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
  The 'src' operand is assumed to be packed already. The 'bit_offset' parameter indicates
  the bit offset of the last set bit in the 'src' operand. The 'data' operand is packed
  and merged with the 'src' operand. The 'bitwidth' parameter indicates the bitwidth of
  each element in the 'data' operand.
parameters:
  - ctype: "const typename Vec::register_type"
    name: "src"
    description: "Source register which is used for merging (assumed to be packed already)."
  - ctype: "const unsigned"
    name: "bit_offset"
    description: "Bit offset of the last set bit."
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "std::tuple<typename Vec::register_type, int, typename Vec::register_type>"
  description: "Tuple containing the merged vector, an int indicating whether the data vector had an overflow (-1: false, >=0 new offset) and the overflow."
  # description: "Vector containing packed and merged elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<tuple>", "<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      using UnsignedT = std::make_unsigned_t<T>;
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      //we are wasting some space here, but it is easier to implement (and maybe even more efficient)
      BigIntT tmp_result[Vec::vector_element_count()];
      TSL_UNROLL((Vec::vector_element_count()>>1))
      for (unsigned int i = 0; i < (Vec::vector_element_count()>>1); ++i) {
        tmp_result[i] = BigIntT{(UnsignedT)data[(i<<1)]} | (BigIntT{(UnsignedT)data[(i<<1)+1]} << bitwidth);
      }
      unsigned current_result_position = Vec::vector_element_count()>>1;
      unsigned previous_stage_start_idx = 0;
      unsigned current_stage = 1;
      TSL_UNROLL(cilog2((Vec::vector_element_count()>>1)))
      for(size_t current_upper_idx = (Vec::vector_element_count()>>2); current_upper_idx >= 1; current_upper_idx>>=1) {
          TSL_UNROLL(current_upper_idx)
          for(size_t i = 0; i < current_upper_idx; ++i) {
            tmp_result[current_result_position + i] =
                tmp_result[previous_stage_start_idx + (i<<1)] | (tmp_result[previous_stage_start_idx + (i<<1)+1] << (bitwidth<<current_stage));
          }
          current_result_position += current_upper_idx;
          previous_stage_start_idx += current_upper_idx<<1;
          ++current_stage;
      }
      BigIntT packed_data = tmp_result[Vec::vector_element_count()-2];
      BigIntT packed_data_shifted = packed_data << bit_offset;

      typename Vec::register_type result{};
      TSL_UNROLL(Vec::vector_element_count())
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = src[i] | (T)(packed_data_shifted.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT))));
      }
      // check for overflow
      auto new_bitwidth = (bit_offset + bitwidth * Vec::vector_element_count());
      if (new_bitwidth >= Vec::vector_size_b()) {
        new_bitwidth -= Vec::vector_size_b();
        packed_data >>= (bitwidth * Vec::vector_element_count() - new_bitwidth);
        typename Vec::register_type overflow_result{};
        TSL_UNROLL(Vec::vector_element_count())
        for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
          overflow_result[i] = packed_data.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
        }
        return std::make_tuple(result, new_bitwidth, overflow_result);
      }
      return std::make_tuple(result, -1, data);
...
# ---
# primitive_name: "pack_bits_treelike"
# brief_description: "Packs elements from a vector together using a fixed bitwidth."
# detailed_description: |
#   Packs elements from a vector together using a fixed bitwidth. The bitwidth
#   must be less than the number of bits in the vector's base type.
#   The elements are packed together in little-endian order, i.e. the least
#   significant bits of the first element are used first.
# parameters:
#   - ctype: "const typename Vec::register_type"
#     name: "data"
#     description: "Data vector."
#   - ctype: "const unsigned"
#     name: "bitwidth"
#     description: "Bitwidth of each element."
# returns:
#   ctype: "typename Vec::register_type"
#   description: "Vector containing packed elements."
# definitions:
#   - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
#     ctype: ["uint64_t"]
#     lscpu_flags: ["oneAPIfpgaDev"]
#     vector_length_agnostic: True
#     includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>"]
#     implementation: |
#       using T = typename Vec::base_type;
#       typename Vec::register_type result{};
#       TSL_UNROLL(Vec::vector_element_count())
#       for(int i = 0; i < Vec::vector_element_count(); i+=16) {
#         T add_1_1 = value[ 0] + value[ 1];
#         T add_1_2 = value[ 2] + value[ 3];
#         T add_1_3 = value[ 4] + value[ 5];
#         T add_1_4 = value[ 6] + value[ 7];

#         T add_2_1 = add_1_1 + add_1_2;
#         T add_2_2 = add_1_3 + add_1_4;

#         result += add_2_1 + add_2_2;
#       }
#       return result;
# ...
