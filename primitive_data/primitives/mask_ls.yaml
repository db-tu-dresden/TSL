---
name: "mask_ls"
description: "Load/Store primitives on masked registers"
...
---
primitive_name: "storeu"
functor_name: "mask_storeu"
brief_description: "Stores data from a vector register to (un)aligned memory."
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "mask"
    description: "Vector mask register indicating which elements that should be saved."
  - ctype: "typename Vec::base_type*"
    name: "memory"
    description: "(Un)aligned memory where the data should be stored into."
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Vector containing the data."
testing:
  - test_name: "all_zero_mask"
    requires: ["to_mask", "integral_all_false", "set1"]
    implementation: |
      using T = typename Vec::base_type;
      using reg_t = typename Vec::register_type;

      typename Vec::mask_type mask = to_mask<Vec>(integral_all_false<Vec>());

      std::size_t element_count = 1024;
      testing::test_memory_helper_t<Vec> test_helper{Vec::vector_element_count(), false};
      bool allOk = true;
      auto reference_result_ptr = test_helper.result_ref();
      auto test_result_ptr = test_helper.result_target();

      for(std::size_t i = 0; i < (element_count - Vec::vector_element_count()); i += Vec::vector_element_count()){
        for(size_t j = i; j < i + Vec::vector_element_count(); ++j) {
          reference_result_ptr[j-i] = j;
          test_result_ptr[j-i] = j;
        }
        auto vec = set1<Vec>(0);
        storeu<Vec>(mask, test_result_ptr, vec);
        test_helper.synchronize();
        allOk &= test_helper.validate();
      }
      return allOk;
  - test_name: "all_one_mask"
    requires: ["to_mask", "integral_all_true", "set1"]
    implementation: |
      using T = typename Vec::base_type;
      using reg_t = typename Vec::register_type;

      typename Vec::mask_type mask = to_mask<Vec>(integral_all_true<Vec>());

      std::size_t element_count = 1024;
      testing::test_memory_helper_t<Vec> test_helper{Vec::vector_element_count(), false};
      bool allOk = true;
      auto reference_result_ptr = test_helper.result_ref();
      auto test_result_ptr = test_helper.result_target();

      for(std::size_t i = 0; i < (element_count - Vec::vector_element_count()); i += Vec::vector_element_count()){
        for(size_t j = i; j < i + Vec::vector_element_count(); ++j) {
          reference_result_ptr[j-i] = i;
        }
        auto vec = set1<Vec>(i);
        storeu<Vec>(mask, test_result_ptr, vec);
        test_helper.synchronize();
        allOk &= test_helper.validate();
      }
      return allOk;
definitions:
#INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["uint32_t", "uint64_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx512f"]
    implementation: "return _mm512_mask_storeu_epi{{ intrin_tp[ctype][1]  }}(reinterpret_cast<void*>(memory), mask, data);"
  - target_extension: "avx512"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
    lscpu_flags: ["avx512bw"]
    implementation: "return _mm512_mask_storeu_epi{{ intrin_tp[ctype][1]  }}(reinterpret_cast<void*>(memory), mask, data);"
  - target_extension: "avx512"
    ctype: ["float", "double"]
    lscpu_flags: ["avx512f"]
    implementation: "return _mm512_mask_storeu_{{ intrin_tp_full[ctype] }}(reinterpret_cast<void*>(memory), mask, data);"
#INTEL - AVX2
  - target_extension: "avx2"
    ctype: ["uint32_t", "uint64_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx512f", "avx512vl"]
    implementation: "return _mm256_mask_storeu_epi{{ intrin_tp[ctype][1]  }}(reinterpret_cast<void*>(memory), tsl::to_integral<Vec>(mask), data);"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
    lscpu_flags: ["avx512bw", "avx512vl"]
    implementation: "return _mm256_mask_storeu_epi{{ intrin_tp[ctype][1]  }}(reinterpret_cast<void*>(memory), tsl::to_integral<Vec>(mask), data);"
  - target_extension: "avx2"
    ctype: ["float", "double"]
    lscpu_flags: ["avx512f", "avx512vl"]
    implementation: "return _mm256_mask_storeu_{{ intrin_tp_full[ctype] }}(reinterpret_cast<void*>(memory), tsl::to_integral<Vec>(mask), data);"
#INTEL - SSE
  - target_extension: "sse"
    ctype: ["uint32_t", "uint64_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx512f", "avx512vl"]
    implementation: "return _mm_mask_storeu_epi{{ intrin_tp[ctype][1]  }}(reinterpret_cast<void*>(memory), tsl::to_integral<Vec>(mask), data);"
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
    lscpu_flags: ["avx512bw", "avx512vl"]
    implementation: "return _mm_mask_storeu_epi{{ intrin_tp[ctype][1]  }}(reinterpret_cast<void*>(memory), tsl::to_integral<Vec>(mask), data);"
  - target_extension: "sse"
    ctype: ["float", "double"]
    lscpu_flags: ["avx512f", "avx512vl"]
    implementation: "return _mm_mask_storeu_{{ intrin_tp_full[ctype] }}(reinterpret_cast<void*>(memory), tsl::to_integral<Vec>(mask), data);"
#SCALAR
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: []
    implementation: "if(mask){*memory = data;}"
...
---
primitive_name: "gather"
functor_name: "mask_gather"
additional_simd_template_parameter:
  name: "IndicesType"
  default_value: "typename Vec::offset_register_type"
brief_description: "If mask[i] is 1, load memory[index[i] * scale], otherwise use source[i]"
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "N"
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "mask"
    description: "Mask indicating which lanes should be gathered."
  - ctype: "const typename Vec::register_type"
    name: "source"
    description: "Vector register containing values which should be preserved depending on the mask (if mask[i] == 0)."
  - ctype: "const void*"
    name: "memory"
    description: "(Start)pointer of the memory (which is used as base for address calculation)."
  - ctype: "const typename IndicesType::offset_base_register_type"
    name: "index"
    description: "Offsets array containing simd<offset_t, EXTENSION> register_types containing relative offsets to the start pointer (the number of array elements depend on the sizeof(offset_type)/sizeof(base_type) ratio, where sizeof(offset_type) should be 8)."
  - ctype: "std::integral_constant<int, N>"
    name: "scale"
    description: "Scale."
    declaration_attributes: "[[maybe_unused]]"
returns:
  ctype: "typename Vec::register_type"
  description: "Vector containing gathered data."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    additional_simd_template_extension: "avx512"
    ctype: ["uint32_t", "uint64_t", "int32_t", "int64_t"]
    lscpu_flags: ['avx512f']
    implementation: "return _mm512_mask_i{{ intrin_tp[ctype][1] }}gather_epi{{ intrin_tp[ctype][1] }}(source, mask, index, memory, N);"
  - target_extension: "avx512"
    additional_simd_template_extension: "avx512"
    ctype: ["float"]
    lscpu_flags: ['avx512f']
    implementation: "return _mm512_mask_i32gather_ps(source, mask, index, memory, N);"
  - target_extension: "avx512"
    additional_simd_template_extension: "avx512"
    ctype: ["double"]
    lscpu_flags: ['avx512f']
    implementation: "return _mm512_mask_i64gather_pd(source, mask, index, memory, N);"
  #INTEL - AVX2
  - target_extension: "avx2"
    additional_simd_template_extension: "avx2"
    ctype: ["uint64_t", "int64_t"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_mask_i64gather_epi64(source, reinterpret_cast<long long int const *>(memory), index, mask, N);"
  - target_extension: "avx2"
    additional_simd_template_extension: "avx2"
    ctype: ["uint32_t", "int32_t"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_mask_i32gather_epi32(source, reinterpret_cast<int const *>(memory), index, mask, N);"
  - target_extension: "avx2"
    additional_simd_template_extension: "avx2"
    ctype: ["float"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_mask_i32gather_ps(source, reinterpret_cast<float const *>(memory), index, mask, N);"
  - target_extension: "avx2"
    additional_simd_template_extension: "avx2"
    ctype: ["double"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_mask_i64gather_pd(source, reinterpret_cast<double const *>(memory), index, mask, N);"
  #INTEL - SSE
  - target_extension: "sse"
    additional_simd_template_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'sse2' ]
    is_native: False
    implementation: |
      alignas(Vec::vector_size_B()) std::array<typename Vec::base_type, Vec::vector_element_count()> result{};
      using offsetExt = typename Vec::transform_extension<Vec::offset_base_type>;
      auto const idx_array = tsl::to_array<offsetExt>(index);
      auto const src_array = tsl::to_array<Vec>(source);
      auto const mask_array = tsl::to_array<Vec>(mask);
      if constexpr(N == 1) {
        auto mem = reinterpret_cast<char const*>(memory);
        for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
          result[i] = (mask_array[i] == 0) ? src_array[i] : mem[idx_array[i]];
        }
      } else {
        if constexpr(N == sizeof(typename Vec::base_type)) {
          auto mem = reinterpret_cast<typename Vec::base_type const *>(memory);
          for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
            result[i] = (mask_array[i] == 0) ? src_array[i] : mem[idx_array[i]];
          }
        } else {
          auto mem = reinterpret_cast<char const*>(memory);
          for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
            result[i] = (mask_array[i] == 0) ? src_array[i] : mem[idx_array[i]*N];
          }
        }
      }
      return tsl::load<Vec>(result.data());
  #ARM - NEON
  - target_extension: "neon"
    additional_simd_template_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "int8_t", "int16_t", "int32_t", "float", "double"]
    additional_simd_template_base_type_mapping_dict: {
      "int8_t":   ["int8_t", "uint8_t"],
      "uint8_t":  ["int8_t", "uint8_t"],
      "int16_t":  ["int16_t", "uint16_t"],
      "uint16_t": ["int16_t", "uint16_t"],
      "int32_t":  ["int32_t", "uint32_t"],
      "uint32_t": ["int32_t", "uint32_t"],
      "float":    ["int32_t", "uint32_t"],
      "double":   ["int64_t", "uint64_t"],
    }
    lscpu_flags: [ 'neon' ]
    is_native: False
    implementation: |
      alignas(Vec::vector_size_B()) std::array<typename Vec::base_type, Vec::vector_element_count()> result{};
      auto const src_array = tsl::to_array<Vec>(source);
      auto mem = reinterpret_cast<typename Vec::base_type const *>(memory);
      auto const idx_array = tsl::to_array<IndicesType>(index);
      using VecMaskT = typename Vec::transform_extension<{{ additional_simd_template_base_type }}>;
      auto const mask_array = tsl::to_array<VecMaskT>(mask);
      for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = (mask_array[i] == 0) ? src_array[i] : mem[idx_array[i]];
      }
      return tsl::load<Vec>(result.data());
  - target_extension: "neon"
    additional_simd_template_extension: "neon"
    ctype: ["int64_t", "uint64_t"]
    lscpu_flags: [ 'neon' ]
    is_native: False
    implementation: |
      auto mem = reinterpret_cast<typename Vec::base_type const *>(memory);
      auto tmp = vdupq_n_s64( ( mask[ 0 ] == 0 ) ? source[ 0 ] : mem[ index[0] ] );
      return vsetq_lane_s64( ( ( mask[ 1 ] == 0 ) ? source[ 1 ] : mem[ index[1] ] ), tmp, 1 );
  #SCALAR
  - target_extension: "scalar"
    additional_simd_template_extension: "scalar"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ ]
    implementation: "return (mask&1)==1 ? reinterpret_cast<typename Vec::base_type const *>(memory)[index] : source;"
...
---
primitive_name: "scatter"
functor_name: "mask_scatter"
brief_description: "Transfers data from a vector register to an arbitrary locations."
additional_non_specialized_template_parameters:
  - ctype: "int"
    name: "N"
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "mask"
    description: "Mask indicating which lanes should be scattered."
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Vector register containing values which should be scattered to memory."
  - ctype: "void*"
    name: "memory"
    description: "(Start)pointer of the memory (which is used as base for address calculation)."
  - ctype: "const typename Vec::offset_base_register_type"
    name: "index"
    description: "Offsets array containing simd<offset_t, EXTENSION> register_types containing relative offsets to the start pointer (the number of array elements depend on the sizeof(offset_type)/sizeof(base_type) ratio, where sizeof(offset_type) should be 8)."
  - ctype: "std::integral_constant<int, N>"
    name: "scale"
    description: "Scale."
    declaration_attributes: "[[maybe_unused]]"
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["uint32_t", "int32_t", "uint64_t", "int64_t"]
    lscpu_flags: ["avx512f"]
    implementation: |
      _mm512_mask_i{{ intrin_tp[ctype][1] }}scatter_epi{{ intrin_tp[ctype][1] }}(
         memory, mask, index, data, N
      );
  - target_extension: "avx512"
    ctype: ["float"]
    lscpu_flags: ["avx512f"]
    implementation: "_mm512_mask_i32scatter_ps(memory, mask, index, data, N);"
  - target_extension: "avx512"
    ctype: ["double"]
    lscpu_flags: ["avx512f"]
    implementation: "_mm512_mask_i64scatter_pd(memory, mask, index, data, N);"
  #INTEL - AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "int8_t", "uint16_t", "int16_t", "uint32_t", "int32_t", "uint64_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx2"]
    is_native: False
    includes: ["<array>"]
    implementation: |
      auto const val_array = tsl::to_array<Vec>(data);
      using offsetExt = typename Vec::transform_extension<Vec::offset_base_type>;
      auto const idx_array = tsl::to_array<offsetExt>(index);
      auto const mask_array = tsl::to_array<Vec>(mask);
      TSL_UNROLL(Vec::vector_element_count())
      for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        if(mask_array[i] != 0) {
          if constexpr(N==sizeof(typename Vec::base_type)) {
            auto mem = reinterpret_cast<typename Vec::base_type *>(memory);
            mem[idx_array[i]] = val_array[i];
          } else {
            if constexpr(N==1) {
              *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[idx_array[i]]) = val_array[i];
            } else {
              *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[(idx_array[i]<<(cilog2(N)))]) = val_array[i];
            }
          }
        }
      }
  #INTEL - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'sse2' ]
    includes: ["<array>"]
    is_native: False
    implementation: |
      auto const val_array = tsl::to_array<Vec>(data);
      using offsetExt = typename Vec::transform_extension<Vec::offset_base_type>;
      auto const idx_array = tsl::to_array<offsetExt>(index);
      auto const mask_array = tsl::to_array<Vec>(mask);
      TSL_UNROLL(Vec::vector_element_count())
      for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        if(mask_array[i] != 0) {
          if constexpr(N==sizeof(typename Vec::base_type)) {
            auto mem = reinterpret_cast<typename Vec::base_type *>(memory);
            mem[idx_array[i]] = val_array[i];
          } else {
            if constexpr(N==1) {
              *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[idx_array[i]]) = val_array[i];
            } else {
              *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[(idx_array[i]<<(cilog2(N)))]) = val_array[i];
            }
          }
        }
      }
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    includes: ["<array>"]
    is_native: False
    implementation: |
      alignas(Vec::vector_size_B()) std::array<typename Vec::offset_base_type, Vec::vector_element_count()> idx_array{};
      alignas(Vec::vector_size_B()) std::array<typename Vec::base_type, Vec::vector_element_count()> val_array{};
      alignas(Vec::vector_size_B()) std::array<typename Vec::offset_base_type, Vec::vector_element_count()> mask_array{};
      tsl::store<Vec>(val_array.data(), data);
      tsl::store<typename Vec::transform_extension<Vec::offset_base_type>>(idx_array.data(), index);
      tsl::store<typename Vec::transform_extension<Vec::offset_base_type>>(mask_array.data(), mask);
      TSL_UNROLL(Vec::vector_element_count())
      for(std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        if(mask_array[i] != 0) {
          if constexpr(N==sizeof(typename Vec::base_type)) {
            auto mem = reinterpret_cast<typename Vec::base_type *>(memory);
            mem[idx_array[i]] = val_array[i];
          } else {
            if constexpr(N==1) {
              *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[idx_array[i]]) = val_array[i];
            } else {
              *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[(idx_array[i]<<(cilog2(N)))]) = val_array[i];
            }
          }
        }
      }
  #SCALAR
  - target_extension: "scalar"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ ]
    implementation: |
      if((mask&0b1) != 0) {
        if constexpr(N==sizeof(typename Vec::base_type)) {
          auto mem = reinterpret_cast<typename Vec::base_type *>(memory);
          mem[index] = data;
        } else {
          if constexpr(N==1) {
            *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[index]) = data;
          } else {
            *reinterpret_cast<typename Vec::base_type*>(&reinterpret_cast<uint8_t*>(memory)[(index<<(cilog2(N)))]) = data;
          }
        }
      }
...
---
primitive_name: "masked_set1"
brief_description: "Partially override a Vector with a single value."
parameters:
   - ctype: "const typename Vec::register_type"
     name: "src"
     description: "Base Vector."
   - ctype: "const typename Vec::imask_type"
     name: "mask"
     description: "Mask of elements to change."
   - ctype: "const typename Vec::base_type"
     name: "value"
     description: "Value to set for elements where the mask bit is 1."
returns:
   ctype: "typename Vec::register_type"
   description: "Base Vector, with the elements specified by mask changed to value."
testing:
   -  requires: ["loadu"]
      includes: ["<cstddef>"]
      implementation: |
        using T = typename Vec::base_type;
        std::size_t element_count = 1024;
        bool allOk = true;
        testing::test_memory_helper_t<Vec> test_helper{element_count, Vec::vector_element_count(), false};
        auto reference_result_ptr = test_helper.result_ref();
        auto test_result_ptr = test_helper.result_target();
        auto test_data_ptr = test_helper.data_target();
        for(std::size_t i = 0; i < element_count - Vec::vector_element_count(); i+=Vec::vector_element_count()) {
            T random_value;
            testing::rnd_init(&random_value, 1);
            typename Vec::imask_type random_integral;
            testing::rnd_init(&random_integral, 1);
            auto vec_src = loadu<Vec>( &test_data_ptr[i] );
            auto result = masked_set1<Vec>(vec_src, random_integral, random_value);
            for(std::size_t j = 0; j < Vec::vector_element_count(); j++) {
                reference_result_ptr[j] = (random_integral >> j) & 1 ? random_value : test_data_ptr[i + j];
            }
            allOk &= test_helper.validate_simd_register(result);
        }
        return allOk;
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
     lscpu_flags: ["avx512bw"]
     implementation: "return _mm512_mask_set1_epi{{ intrin_tp[ctype][1] }}(src, mask, value);"
   - target_extension: "avx512"
     ctype: ["int32_t", "int64_t", "uint32_t", "uint64_t"]
     lscpu_flags: ["avx512f"]
     implementation: "return _mm512_mask_set1_epi{{ intrin_tp[ctype][1] }}(src, mask, value);"
   - target_extension: "avx512"
     ctype: ["float"]
     lscpu_flags: ["avx512f"]
     implementation: "return _mm512_castsi512_ps(_mm512_mask_set1_epi32(_mm512_castps_si512(src), mask, *reinterpret_cast<const int32_t*>(&value)));"
   - target_extension: "avx512"
     ctype: ["double"]
     lscpu_flags: ["avx512f"]
     implementation: "return _mm512_castsi512_pd(_mm512_mask_set1_epi64(_mm512_castpd_si512(src), mask, *reinterpret_cast<const int64_t*>(&value)));"
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
     lscpu_flags: ["avx512bw", "avx512vl"]
     implementation: "return _mm256_mask_set1_epi{{ intrin_tp[ctype][1] }}(src, mask, value);"
   - target_extension: "avx2"
     ctype: ["int32_t", "int64_t", "uint32_t", "uint64_t"]
     lscpu_flags: ["avx512f", "avx512vl"]
     implementation: "return _mm256_mask_set1_epi{{ intrin_tp[ctype][1] }}(src, mask, value);"
   - target_extension: "avx2"
     ctype: ["float"]
     lscpu_flags: ["avx", "avx512f", "avx512vl"]
     is_native: False
     implementation: "return _mm256_castsi256_ps(_mm256_mask_set1_epi32(_mm256_castps_si256(src), mask, *reinterpret_cast<const int32_t*>(&value)));"
   - target_extension: "avx2"
     ctype: ["double"]
     lscpu_flags: ["avx", "avx512f", "avx512vl"]
     is_native: False
     implementation: "return _mm256_castsi256_pd(_mm256_mask_set1_epi64(_mm256_castpd_si256(src), mask, *reinterpret_cast<const int64_t*>(&value)));"
#INTEL - SSE
   - target_extension: "sse"
     ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
     lscpu_flags: ["avx512bw", "avx512vl"]
     implementation: "return _mm_mask_set1_epi{{ intrin_tp[ctype][1] }}(src, mask, value);"
   - target_extension: "sse"
     ctype: ["int32_t", "int64_t", "uint32_t", "uint64_t"]
     lscpu_flags: ["avx512f", "avx512vl"]
     implementation: "return _mm_mask_set1_epi{{ intrin_tp[ctype][1] }}(src, mask, value);"
   - target_extension: "sse"
     ctype: ["float"]
     lscpu_flags: ["sse2", "avx512f", "avx512vl"]
     is_native: False
     implementation: "return _mm_castsi128_ps(_mm_mask_set1_epi32(_mm_castps_si128(src), mask, *reinterpret_cast<const int32_t*>(&value)));"
   - target_extension: "sse"
     ctype: ["double"]
     lscpu_flags: ["avx", "avx512f", "avx512vl"]
     is_native: False
     implementation: "return _mm_castsi128_pd(_mm_mask_set1_epi64(_mm_castpd_si128(src), mask, *reinterpret_cast<const int64_t*>(&value)));"
#NEON
  # TODO
#SCALAR
   - target_extension: "scalar"
     ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
     lscpu_flags: []
     implementation: "return (mask & 1) ? value : src;"
...