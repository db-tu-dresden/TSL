---
name: "mask"
description: "Mask related primitives."
...
---
primitive_name: "to_mask"
brief_description: "Forms a mask type from an integral."
parameters:
  - ctype: "const typename Vec::imask_type"
    name: "mask"
    description: "Integral value representing the vector mask register."
returns:
  ctype: "typename Vec::mask_type"
  description: "Vector mask register containing mask style data."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: ["avx512f"] #we need avx512f, otherwise this would be generated if no avx512 is supported and an extension avx512 would be needed. This would lead to an error
    implementation: "return mask;"
  #SCALAR
  - target_extension: "scalar"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: []
    implementation: "return (mask & 0b1);"
  #INTEL - AVX2
  - target_extension: "avx2"
    ctype: ["int8_t", "uint8_t"]
    lscpu_flags: ['sse4_2', 'avx', 'avx2']
    specialization_comment: "We use sse4_2 here to trick the generator into thinking that this variant is 'more' specialized than the ('sse2','avx') variant."
    implementation: |
      auto const permute_vec = _mm256_set_epi64x(0x303030303030303, 0x202020202020202, 0x101010101010101, 0x0);
      auto const data_vec = _mm256_set1_epi32(mask);
      auto const shuffled_vec = _mm256_shuffle_epi8(data_vec, permute_vec);
      auto const and_vec = _mm256_set1_epi64x(0x8040201008040201);
      auto const and_shuffled_vec = _mm256_and_si256(shuffled_vec, and_vec);
      auto result = _mm256_cmpeq_epi8(and_shuffled_vec, and_vec);
      return result;
  - target_extension: "avx2"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ['sse2', 'avx']
    implementation: |
      using sse_type = simd<typename Vec::base_type, sse>;
      auto tmp128_lo = to_mask<sse_type, Idof>::apply(mask);
      auto tmp128_hi = to_mask<sse_type, Idof>::apply(mask >> sse_type::vector_element_count());
      return _mm256_set_m128i(tmp128_hi, tmp128_lo);
  - target_extension: "avx2"
    ctype: ["float", "double"]
    lscpu_flags: ['sse2', 'avx']
    implementation: |
      using sse_type = simd<typename Vec::base_type, sse>;
      auto tmp128_lo = to_mask<sse_type, Idof>::apply(mask);
      auto tmp128_hi = to_mask<sse_type, Idof>::apply(mask >> sse_type::vector_element_count());
      {% if ctype == "float" %}
      return _mm256_set_m128(tmp128_hi, tmp128_lo);
      {% else %}
      return _mm256_set_m128d(tmp128_hi, tmp128_lo);
      {% endif %}
  - target_extension: "avx2"
    ctype: ["int16_t", "uint16_t"]
    lscpu_flags: ['sse4_2', 'avx', 'avx2']
    implementation: |
      auto const and_vec = _mm256_set_epi64x(0x8000400020001000, 0x800040002000100, 0x80004000200010, 0x8000400020001);
      auto const data_vec = _mm256_set1_epi16(mask);
      auto const anded_vec = _mm256_and_si256(data_vec, and_vec);
      return _mm256_cmpeq_epi16(anded_vec, and_vec);
  - target_extension: "avx2"
    ctype: ["int32_t", "uint32_t"]
    lscpu_flags: ['sse4_2', 'avx', 'avx2']
    implementation: |
      auto const and_vec = _mm256_set_epi64x(0x8000000040, 0x2000000010, 0x800000004, 0x200000001);
      auto const data_vec = _mm256_set1_epi32(mask);
      auto const anded_vec = _mm256_and_si256(data_vec, and_vec);
      return _mm256_cmpeq_epi32(anded_vec, and_vec);
  - target_extension: "avx2"
    ctype: ["float"]
    lscpu_flags: ['sse4_2', 'avx', 'avx2']
    implementation: |
      auto const and_vec = _mm256_set_epi64x(0x8000000040, 0x2000000010, 0x800000004, 0x200000001);
      auto const data_vec = _mm256_set1_epi32(mask);
      auto const anded_vec = _mm256_and_si256(data_vec, and_vec);
      return _mm256_castsi256_ps(_mm256_cmpeq_epi32(anded_vec, and_vec));
  - target_extension: "avx2"
    ctype: ["int64_t", "uint64_t"]
    lscpu_flags: ['sse4_2', 'avx', 'avx2']
    implementation: |
      auto const and_vec = _mm256_set_epi64x(0x8, 0x4, 0x2, 0x1);
      auto const data_vec = _mm256_set1_epi64x(mask);
      auto const anded_vec = _mm256_and_si256(data_vec, and_vec);
      return _mm256_cmpeq_epi64(anded_vec, and_vec);
  - target_extension: "avx2"
    ctype: ["double"]
    lscpu_flags: ['sse4_2', 'avx', 'avx2']
    implementation: |
      auto const and_vec = _mm256_set_epi64x(0x8, 0x4, 0x2, 0x1);
      auto const data_vec = _mm256_set1_epi64x(mask);
      auto const anded_vec = _mm256_and_si256(data_vec, and_vec);
      return _mm256_castsi256_pd(_mm256_cmpeq_epi64(anded_vec, and_vec));
  #INTEL - SSE
  - target_extension: ["sse"]
    ctype: ["uint8_t", "int8_t", "uint16_t", "int16_t", "uint32_t", "int32_t", "uint64_t", "int64_t"]
    is_native: False
    lscpu_flags: ["sse2"]
    implementation: |
      using T = typename Vec::offset_base_type;
      typename Vec::base_type result [Vec::vector_element_count()];
      for(int i = 0; i < Vec::vector_element_count(); i++){
        ((mask >> i) & 0b1) ? result[i] = static_cast<T>(-1) : result[i] = 0;
      }
      return tsl::loadu<Vec>(result);
  - target_extension: ["sse"]
    ctype: ["float", "double"]
    is_native: False
    lscpu_flags: ["sse2"]
    implementation: |
      using T = typename Vec::offset_base_type;
      using OffsetExt = typename Vec::template transform_extension<T>;
      T result [Vec::vector_element_count()];
      for(int i = 0; i < Vec::vector_element_count(); i++){
        ((mask >> i) & 0b1) ? result[i] = static_cast<T>(-1) : result[i] = 0;
      }
      return _mm_castsi128_{{ intrin_tp_full[ctype] }}(tsl::loadu<OffsetExt>(result));
  - target_extension: ["sse"]
    ctype: ["uint16_t", "int16_t"]
    lscpu_flags: ["sse2"]
    implementation: |
      auto const and_vec = _mm_set_epi64x(0x8000400020001000, 0x800040002000100);
      auto const data_vec = _mm_set1_epi8(mask);
      auto const anded_vec = _mm_and_si128(data_vec, and_vec);
      return _mm_cmpeq_epi16(anded_vec, and_vec);
  - target_extension: ["sse"]
    ctype: ["uint32_t", "int32_t"]
    lscpu_flags: ["sse2"]
    implementation: |
      auto const and_vec = _mm_set_epi32(0x8, 0x4, 0x2, 0x1);
      auto const data_vec = _mm_set1_epi32(mask);
      auto const anded_vec = _mm_and_si128(data_vec, and_vec);
      return _mm_cmpeq_epi32(anded_vec, and_vec);
  - target_extension: ["sse"]
    ctype: ["float"]
    lscpu_flags: ["sse2"]
    implementation: |
      auto const and_vec = _mm_set_epi32(0x8, 0x4, 0x2, 0x1);
      auto const data_vec = _mm_set1_epi32(mask);
      auto const anded_vec = _mm_and_si128(data_vec, and_vec);
      return _mm_castsi128_ps(_mm_cmpeq_epi32(anded_vec, and_vec));
  - target_extension: ["sse"]
    ctype: ["uint64_t", "int64_t"]
    lscpu_flags: ["sse2", "sse4_1"]
    implementation: |
      auto const and_vec = _mm_set_epi64x(0x2, 0x1);
      auto const data_vec = _mm_set1_epi64x(mask);
      auto const anded_vec = _mm_and_si128(data_vec, and_vec);
      return _mm_cmpeq_epi64(anded_vec, and_vec);
  - target_extension: ["sse"]
    ctype: ["double"]
    lscpu_flags: ["sse2", "sse4_1"]
    implementation: |
      auto const and_vec = _mm_set_epi64x(0x2, 0x1);
      auto const data_vec = _mm_set1_epi64x(mask);
      auto const anded_vec = _mm_and_si128(data_vec, and_vec);
      return _mm_castsi128_pd(_mm_cmpeq_epi64(anded_vec, and_vec));
  - target_extension: ["neon"]
    ctype: ["uint64_t", "int64_t"]
    lscpu_flags: ["neon"]
    implementation: |
      auto const and_vec = tsl::set<Vec>(0x2u, 0x1u);
      auto const data_vec = tsl::set1<Vec>(mask);
      auto const anded_vec = tsl::binary_and<Vec>(data_vec, and_vec);
      return vceqq_{{ intrin_tp_full[ctype] }}(anded_vec, and_vec);
  - target_extension: ["neon"]
    ctype: ["uint32_t", "int32_t"]
    lscpu_flags: ["neon"]
    implementation: |
      auto const and_vec = tsl::set<Vec>(0x8u, 0x4u, 0x2u, 0x1u);
      auto const data_vec = tsl::set1<Vec>(mask);
      auto const anded_vec = tsl::binary_and<Vec>(data_vec, and_vec);
      return vceqq_{{ intrin_tp_full[ctype] }}(anded_vec, and_vec);
  - target_extension: ["neon"]
    ctype: ["uint16_t", "int16_t"]
    lscpu_flags: ["neon"]
    implementation: |
      auto const and_vec = tsl::set<Vec>(0x80u, 0x40u, 0x20u, 0x10u, 0x8u, 0x4u, 0x2u, 0x1u);
      auto const data_vec = tsl::set1<Vec>(mask);
      auto const anded_vec = tsl::binary_and<Vec>(data_vec, and_vec);
      return vceqq_{{ intrin_tp_full[ctype] }}(anded_vec, and_vec);
  - target_extension: ["neon"]
    ctype: ["uint8_t", "int8_t"]
    is_native: False
    lscpu_flags: ["neon"]
    implementation: |
      using T = typename Vec::offset_base_type;
      typename Vec::base_type result [Vec::vector_element_count()];
      for(int i = 0; i < Vec::vector_element_count(); i++){
        ((mask >> i) & 0b1) ? result[i] = static_cast<T>(-1) : result[i] = 0;
      }
      return tsl::loadu<Vec>(result);
  - target_extension: ["neon"]
    ctype: ["float","double"]
    is_native: False
    lscpu_flags: ["neon"]
    implementation: |
      using T = typename Vec::offset_base_type;
      using OffsetExt = typename Vec::template transform_extension<T>;
      T result [Vec::vector_element_count()];
      for(int i = 0; i < Vec::vector_element_count(); i++){
        ((mask >> i) & 0b1) ? result[i] = static_cast<T>(-1) : result[i] = 0;
      }
      return reinterpret_cast<Vec::mask_type>(tsl::loadu<OffsetExt>(result));
...
---
primitive_name: "mask_binary_not"
functor_name: "imask_binary_not"
brief_description: "Binary NOT of a vector integral mask type."
parameters:
  - ctype: "const typename Vec::imask_type"
    name: "mask"
    description: "Mask."
returns:
  ctype: "typename Vec::imask_type"
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    lscpu_flags: ["avx512f"]
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    implementation: "return (~mask);"
  #INTEL - AVX2
  - target_extension: "avx2"
    lscpu_flags: ["avx2"]
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "float"]
    implementation: "return (~mask);"
  - target_extension: "avx2"
    lscpu_flags: ["avx2"]
    ctype: ["int64_t", "uint64_t", "double"]
    implementation: "return (~mask)&(0b1111);"
  #INTEL - SSE
  - target_extension: ["sse"]
    ctype: ["uint8_t", "int8_t", "uint16_t", "int16_t"]
    lscpu_flags: ["sse"]
    implementation: "return (~mask);"
  - target_extension: ["sse"]
    ctype: ["uint32_t", "int32_t", "float"]
    lscpu_flags: ["sse"]
    implementation: "return (~mask)&(0b1111);"
  - target_extension: ["sse"]
    ctype: ["uint64_t", "int64_t", "double"]
    lscpu_flags: ["sse"]
    implementation: "return (~mask)&(0b11);"
  #SCALAR
  - target_extension: ["scalar"]
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "float", "double"]
    lscpu_flags: []
    implementation: "return (~mask);"
...
---
primitive_name: "mask_binary_not"
functor_name: "mask_binary_not"
brief_description: "Binary NOT of a vector mask type."
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "mask"
    description: "Mask."
returns:
  ctype: "typename Vec::mask_type"
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    lscpu_flags: ["avx512f"]
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    implementation: "return (~mask);"
  #INTEL - AVX2
  - target_extension: "avx2"
    lscpu_flags: ["avx2"]
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    implementation: "return _mm256_xor_si256(_mm256_set1_epi8(-1), mask);"
...
---
primitive_name: "mask_binary_and"
brief_description: "Binary AND of two vector mask types."
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "first"
    description: "First mask."
  - ctype: "const typename Vec::mask_type"
    name: "second"
    description: "Second mask."
returns:
  ctype: "typename Vec::mask_type"
  description: "Vector mask register containing the result."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ['avx512f', 'avx512dq', 'avx512bw']
    implementation: "return _kand_mask{{ intrin_tp[ctype][1] }}(first, second);"
  - target_extension: "avx512"
    ctype: ["float"]
    lscpu_flags: ['avx512f']
    implementation: "return _kand_mask16(first, second);"
  - target_extension: "avx512"
    ctype: ["double"]
    lscpu_flags: ['avx512f', 'avx512dq']
    implementation: "return _kand_mask8(first, second);"
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "double"] #no float
    lscpu_flags: ['avx512f']
    implementation: "return first & second;"
  #INTEL AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_and_si256(first, second);"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx"]
    is_native: False
    implementation: "return _mm256_castpd_si256(_mm256_and_pd(_mm256_castsi256_pd(first),_mm256_castsi256_pd(second)));"
  - target_extension: "avx2"
    ctype: ["float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_and_{{ intrin_tp_full[ctype] }}(first, second);"
  #Intel - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_and_si128(first, second);"
  - target_extension: "sse"
    ctype: ["float"]
    lscpu_flags: ["sse"]
    implementation: "return _mm_and_ps(first, second);"
  - target_extension: "sse"
    ctype: [ "double" ]
    lscpu_flags: [ "sse2" ]
    implementation: "return _mm_and_pd(first, second);"
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    implementation: "return vandq_{{ intrin_tp_mask_full[ctype] }}(first, second);"
  #SCARLAR
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ ]
    implementation: "return first & second;"
...
---
primitive_name: "mask_binary_and"
functor_name: "imask_binary_and"
brief_description: "Binary AND of two vector integral mask types."
parameters:
  - ctype: "const typename Vec::imask_type"
    name: "first"
    description: "First mask."
  - ctype: "const typename Vec::imask_type"
    name: "second"
    description: "Second mask."
returns:
  ctype: "typename Vec::imask_type"
  description: "Vector mask register containing the result."
definitions:
  #INTEL - AVX512 already defined in mask_binary_and for Vec::mask_type
  #INTEL AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx2"]
    implementation: "return first & second;"
  #Intel - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["sse2"]
    implementation: "return first & second;"
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    implementation: "return first & second;"
  #SCARLAR
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ ]
    implementation: "return (first & second) & 0b1;"
...
---
primitive_name: "mask_binary_or"
brief_description: "Binary OR of two vector mask types."
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "first"
    description: "First mask."
  - ctype: "const typename Vec::mask_type"
    name: "second"
    description: "Second mask."
returns:
  ctype: "typename Vec::mask_type"
  description: "Vector mask register containing the result."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ['avx512f', 'avx512dq', 'avx512bw']
    implementation: "return _kor_mask{{ intrin_tp[ctype][1] }}(first, second);"
  - target_extension: "avx512"
    ctype: ["float"]
    lscpu_flags: ['avx512f']
    implementation: "return _kor_mask16(first, second);"
  - target_extension: "avx512"
    ctype: ["double"]
    lscpu_flags: ['avx512f', 'avx512dq']
    implementation: "return _kor_mask8(first, second);"
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "double"] #no float
    lscpu_flags: ['avx512f']
    implementation: "return first | second;"
  #INTEL AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_or_si256(first, second);"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx"]
    is_native: False
    implementation: "return _mm256_castpd_si256(_mm256_or_pd(_mm256_castsi256_pd(first),_mm256_castsi256_pd(second)));"
  - target_extension: "avx2"
    ctype: ["float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_or_{{ intrin_tp_full[ctype] }}(first, second);"
  #Intel - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_or_si128(first, second);"
  - target_extension: "sse"
    ctype: ["float"]
    lscpu_flags: ["sse"]
    implementation: "return _mm_or_ps(first, second);"
  - target_extension: "sse"
    ctype: [ "double" ]
    lscpu_flags: [ "sse2" ]
    implementation: "return _mm_or_pd(first, second);"
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    implementation: "return vorrq_{{ intrin_tp_mask_full[ctype] }}(first, second);"
...
---
primitive_name: "mask_binary_or"
functor_name: "imask_binary_or"
brief_description: "Binary OR of two vector integral mask types."
parameters:
  - ctype: "const typename Vec::imask_type"
    name: "first"
    description: "First mask."
  - ctype: "const typename Vec::imask_type"
    name: "second"
    description: "Second mask."
returns:
  ctype: "typename Vec::imask_type"
  description: "Vector mask register containing the result."
definitions:
  #INTEL - AVX512 already defined in mask_binary_or for Vec::mask_type
  #INTEL AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx2"]
    implementation: "return first | second;"
  #Intel - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["sse2"]
    implementation: "return first | second;"
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    implementation: "return first | second;"
...
---
primitive_name: "mask_binary_xor"
brief_description: "Binary XOR of two vector mask types."
parameters:
  - ctype: "const typename Vec::mask_type"
    name: "first"
    description: "First mask."
  - ctype: "const typename Vec::mask_type"
    name: "second"
    description: "Second mask."
returns:
  ctype: "typename Vec::mask_type"
  description: "Vector mask register containing the result."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t"]
    lscpu_flags: ['avx512f', 'avx512dq', 'avx512bw']
    implementation: "return _kxor_mask{{ intrin_tp[ctype][1] }}(first, second);"
  - target_extension: "avx512"
    ctype: ["float"]
    lscpu_flags: ['avx512f']
    implementation: "return _kxor_mask16(first, second);"
  - target_extension: "avx512"
    ctype: ["double"]
    lscpu_flags: ['avx512f', 'avx512dq']
    implementation: "return _kxor_mask8(first, second);"
  - target_extension: "avx512"
    ctype: ["int8_t", "uint8_t", "int16_t", "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t", "double"] #no float
    lscpu_flags: ['avx512f']
    implementation: "return first ^ second;"
  #INTEL AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx2"]
    implementation: "return _mm256_xor_si256(first, second);"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["avx"]
    is_native: False
    implementation: "return _mm256_castpd_si256(_mm256_xor_pd(_mm256_castsi256_pd(first),_mm256_castsi256_pd(second)));"
  - target_extension: "avx2"
    ctype: ["float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return _mm256_xor_{{ intrin_tp_full[ctype] }}(first, second);"
  #Intel - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["sse2"]
    implementation: "return _mm_xor_si128(first, second);"
  - target_extension: "sse"
    ctype: ["float"]
    lscpu_flags: ["sse"]
    implementation: "return _mm_xor_ps(first, second);"
  - target_extension: "sse"
    ctype: [ "double" ]
    lscpu_flags: [ "sse2" ]
    implementation: "return _mm_xor_pd(first, second);"
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    implementation: "return veorq_{{ intrin_tp_mask_full[ctype] }}(first, second);"
...
---
primitive_name: "mask_binary_xor"
functor_name: "imask_binary_xor"
brief_description: "Binary XOR of two vector integral mask types."
parameters:
  - ctype: "const typename Vec::imask_type"
    name: "first"
    description: "First mask."
  - ctype: "const typename Vec::imask_type"
    name: "second"
    description: "Second mask."
returns:
  ctype: "typename Vec::imask_type"
  description: "Vector mask register containing the result."
definitions:
  #INTEL - AVX512 already defined in mask_binary_and for Vec::mask_type
  #INTEL - AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx2"]
    implementation: "return first ^ second;"
  #Intel - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["sse2"]
    implementation: "return first ^ second;"
  #ARM - NEON
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: [ 'neon' ]
    implementation: "return first ^ second;"
...
---
primitive_name: "mask_population_count"
functor_name: "imask_population_count"
parameters:
  - ctype: "const typename Vec::imask_type"
    name: "mask"
    description: "Mask."
returns:
  ctype: "unsigned int"
  description: "Numer of bits set to 1."
testing:
  - test_name: "default"
    implementation: |
      using mask_t = typename Vec::imask_type;
      std::size_t mask_count = 1024;
      testing::test_memory_helper_t<Vec> test_helper{ 1, false };
      auto reference_result_ptr = test_helper.result_ref();
      auto test_result_ptr = test_helper.result_target();
      bool allOk = true;
      if constexpr (std::is_same<bool, typename Vec::mask_type>::value){
        for(std::size_t i = 0; i < mask_count; i++){
          mask_t mask;
          testing::rnd_init(&mask, 1);

          *reference_result_ptr = (mask & 0b1);
          *test_result_ptr = mask_population_count<Vec>(mask);

          test_helper.synchronize();
          allOk &= test_helper.validate();
        }
      }else{
        for(std::size_t i = 0; i < mask_count; i++){
          mask_t mask;
          testing::rnd_init(&mask, 1);

          std::size_t count = 0;
          for(std::size_t j = 0; j < sizeof(mask_t)*8; j++){
            if((mask >> j) & 0b1){
              count++;
            }
          }
          *reference_result_ptr = count;
          *test_result_ptr = mask_population_count<Vec>(mask);

          test_helper.synchronize();
          allOk &= test_helper.validate();
        }
      }
      return allOk;
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: [ "uint8_t", "int8_t" ]
    lscpu_flags: [ "avx512f" ]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountll(mask);
      #elif defined(_MSC_VER)
      return  __popcnt64(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "avx512"
    ctype: [ "uint16_t", "int16_t" ]
    lscpu_flags: [ "avx512f" ]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountl(mask);
      #elif defined(_MSC_VER)
      return  __popcnt32(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "avx512"
    ctype: [ "uint32_t", "int32_t", "float" ]
    lscpu_flags: [ "avx512f" ]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcount(mask);
      #elif defined(_MSC_VER)
      return  __popcnt16(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "avx512"
    ctype: [ "uint64_t", "int64_t", "double" ]
    lscpu_flags: [ "avx512f" ]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcount(mask);
      #elif defined(_MSC_VER)
      return  __popcnt(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  #INTEL - AVX2
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
    specialization_comment: "TODO: actual value is smaller than the type for u/int8. Pls check."
    lscpu_flags: ["avx"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcount(mask);
      #elif defined(_MSC_VER)
      return  __popcnt16(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "avx2"
    ctype: ["uint32_t", "int32_t", "float"]
    specialization_comment: "TODO: actual value is smaller than the type. Pls check."
    lscpu_flags: ["avx"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountl(mask);
      #elif defined(_MSC_VER)
      return  __popcnt32(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "avx2"
    ctype: ["uint64_t", "int64_t", "double"]
    lscpu_flags: ["avx"]
    specialization_comment: "TODO: actual value is smaller than the type. Pls check."
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountll(mask);
      #elif defined(_MSC_VER)
      return  __popcnt64(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  #INTEL - SSE
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
    specialization_comment: "TODO: actual value is smaller than the type for u/int16. Pls check."
    lscpu_flags: ["sse"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcount(mask);
      #elif defined(_MSC_VER)
      return  __popcnt16(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "sse"
    ctype: ["uint32_t", "int32_t", "float"]
    specialization_comment: "TODO: actual value is smaller than the type. Pls check."
    lscpu_flags: ["sse"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountl(mask);
      #elif defined(_MSC_VER)
      return  __popcnt32(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "sse"
    ctype: ["uint64_t", "int64_t", "double"]
    specialization_comment: "TODO: actual value is smaller than the type. Pls check."
    lscpu_flags: ["sse"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountll(mask);
      #elif defined(_MSC_VER)
      return  __popcnt64(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  #SCALAR
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t", "uint32_t", "int32_t", "uint64_t", "int64_t", "float", "double"]
    lscpu_flags: []
    implementation: return (mask & 0b1);
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "int8_t", "int16_t"]
    specialization_comment: "TODO: actual value is smaller than the type for u/int16. Pls check."
    lscpu_flags: ["neon"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcount(mask);
      #elif defined(_MSC_VER)
      return  __popcnt16(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "neon"
    ctype: ["uint32_t", "int32_t", "float"]
    specialization_comment: "TODO: actual value is smaller than the type. Pls check."
    lscpu_flags: ["neon"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountl(mask);
      #elif defined(_MSC_VER)
      return  __popcnt32(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
  - target_extension: "neon"
    ctype: ["uint64_t", "int64_t", "double"]
    specialization_comment: "TODO: actual value is smaller than the type. Pls check."
    lscpu_flags: ["neon"]
    implementation: |
      #if defined(__clang__) || defined(__GNUC__)
      return __builtin_popcountll(mask);
      #elif defined(_MSC_VER)
      return  __popcnt64(mask);
      #else
      static_assert(false, "No known implementation for popcount");
      #endif
...
---
primitive_name: "integral_all_true"
returns:
  ctype: "typename Vec::imask_type"
  description: "Integral value where all values are set to 1."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "avx512f" ]
    includes: ["<type_traits>"]
    implementation: "return ~0;"
  #INTEL - AVX2
  - target_extension: "avx2"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "avx2" ]
    includes: ["<type_traits>"]
    implementation: |
      if constexpr(Vec::vector_element_count() < 8) {
        return ((static_cast<typename Vec::imask_type>(1)<<Vec::vector_element_count()) - 1);
      } else {
        return ~0;
      }
  #INTEL - SSE
  - target_extension: "sse"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "sse" ]
    includes: ["<type_traits>"]
    implementation: |
      if constexpr(Vec::vector_element_count() < 8) {
        return ((static_cast<typename Vec::imask_type>(1)<<Vec::vector_element_count()) - 1);
      } else {
        return ~0;
      }
  #SCALAR
  - target_extension: "scalar"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: []
    implementation: return true;
  #ARM - NEON
  - target_extension: "neon"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "neon" ]
    includes: ["<type_traits>"]
    implementation: |
      if constexpr(Vec::vector_element_count() < 8) {
        return ((static_cast<typename Vec::imask_type>(1)<<Vec::vector_element_count()) - 1);
      } else {
        return ~0;
      }
...
---
primitive_name: "integral_all_false"
returns:
  ctype: "typename Vec::imask_type"
  description: "Integral value where all values are set to 0."
definitions:
  #INTEL - AVX512
  - target_extension: "avx512"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "avx512f" ]
    implementation: return 0;
  #INTEL - AVX2
  - target_extension: "avx2"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "avx2" ]
    implementation: return 0;
  #INTEL - SSE
  - target_extension: "sse"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: [ "sse" ]
    implementation: return 0;
  #SCALAR
  - target_extension: "scalar"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: []
    implementation: return false;
  #ARM - NEON
  - target_extension: "neon"
    ctype: [ "uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double" ]
    lscpu_flags: ["neon"]
    implementation: return 0;
...
---
primitive_name: "test_mask"
functor_name: "test_imask"
brief_description: "Tests whether a specific bit is set to 1."
parameters:
  - ctype: "typename Vec::imask_type"
    name: "mask"
    description: "Mask to be tested."
  - ctype: "int"
    name: "position"
    description: "Position that should be tested."
returns:
  ctype: "bool"
  description: "True if the bit is set to 1, false otherwise."
definitions:
  - target_extension: "avx512"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx512f"]
    implementation: "return (mask & (1<< position));"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return (mask & (1<< position));"
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["sse"]
    implementation: "return (mask & (1<< position));"
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: []
    implementation: "return (mask & (1<< position));"
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["neon"]
    implementation: "return (mask & (1<< position));"
...
---
primitive_name: "insert_mask"
functor_name: "insert_imask"
brief_description: "Merges two masks. result[0:i-1] = mask_a[0:i-1]; result[i:N-1] = mask_b[0:N-1] where N is the number of effective bits in mask."
parameters:
  - ctype: "typename Vec::imask_type"
    name: "mask_a"
    description: "First mask."
  - ctype: "typename Vec::imask_type"
    name: "mask_b"
    description: "Second mask."
  - ctype: "int"
    name: "position"
    description: "Position where the masks should be merged."
returns:
  ctype: "typename Vec::imask_type"
  description: "Merged mask."
definitions:
  - target_extension: "avx512"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx512f"]
    implementation: "return mask_a | (mask_b << position);"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return mask_a | (mask_b << position);"
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["sse"]
    implementation: "return mask_a | (mask_b << position);"
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: []
    implementation: "return mask_a | (mask_b << position);"
  - target_extension: "neon"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["neon"]
    implementation: "return mask_a | (mask_b << position);"
...
---
primitive_name: "extract_mask"
functor_name: "extract_imask"
brief_description: "Extracts one mask from another."
parameters:
  - ctype: "typename Vec::imask_type"
    name: "mask"
    description: "First mask."
  - ctype: "int"
    name: "position"
    description: "Position where the masks should be merged."
returns:
  ctype: "typename Vec::imask_type"
  description: "Extracted mask."
definitions:
  - target_extension: "avx512"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx512f"]
    implementation: "return (mask >> position) & ((1UL << Vec::vector_element_count()) - 1);"
  - target_extension: "avx2"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["avx"]
    implementation: "return (mask >> position) & ((1UL << Vec::vector_element_count()) - 1);"
  - target_extension: "sse"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: ["sse"]
    implementation: "return (mask >> position) & ((1UL << Vec::vector_element_count()) - 1);"
  - target_extension: "scalar"
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t", "float", "double"]
    lscpu_flags: []
    implementation: "return (mask >> position) & ((1UL << Vec::vector_element_count()) - 1);"
...
#---
#primitive_name: "mask_reduce"
#brief_description: "Masks out every non relevant bit."
#parameters:
#   - ctype: "const typename Vec::base_type"
#     name: "mask"
#     description: "Integral value containing n (set) bits."
#returns:
#   ctype: "typename Vec::base_type"
#   description: "Integral value with only relevant bits set (or not)."
#definitions:
##INTEL - AVX512
#   - target_extension: "avx512"
#     ctype: "int64_t"
#     lscpu_flags: ['avx512f']
#     implementation: "return mask & 0xFF; //mask is integral already."
##INTEL - AVX2
#   - target_extension: "avx2"
#     ctype: "int64_t"
#     lscpu_flags: [ 'avx' ]
#     implementation: "return mask & 0xF;"
##INTEL - SSE
#   - target_extension: "sse"
#     ctype: "int64_t"
#     lscpu_flags: [ 'sse2' ]
#     implementation: "return mask & 0x3;"
##ARM - NEON
#   - target_extension: "neon"
#     ctype: "int64_t"
#     lscpu_flags: [ 'neon' ]
#     implementation: "return mask & 0x3;"
#...
#---
#primitive_name: "insert_delim_zero"
#brief_description: "Inserts 0 into bitmask using provided mask."
#parameters:
#   - ctype: "typename Vec::mask_type"
#     name: "data"
#     description: "Data mask register (e.g., data=0b11001011)."
#   - ctype: "typename Vec::mask_type"
#     name: "mask"
#     description: "Vector mask register containing mask which is used to insert 0 bits (e.g., mask=0b110011)"
#returns:
#   ctype: "typename Vec::mask_type"
#   description: "Data mask with inserted 0 bits (e.g., 0010{from data}00{because mask is 0 }11{from data})."
#definitions:
#INTEL - AVX512
#   - target_extension: "avx512"
#     ctype: "uin64_t"
#     lscpu_flags: ['bmi2']
#     implementation: "return _pdep64; //mask is integral already."
#INTEL - AVX2
#   - target_extension: "avx2"
#     ctype: "int64_t"
#     lscpu_flags: [ 'avx' ]
#     implementation: "return _mm256_movemask_pd( _mm256_castsi256_pd( vec_mask ) );"
#INTEL - SSE
#   - target_extension: "sse"
#     ctype: "int64_t"
#     lscpu_flags: [ 'sse2' ]
#     implementation: "return _mm_movemask_pd( _mm_castsi128_pd( vec_mask ) );"
#ARM - NEON
#   - target_extension: "neon"
#     ctype: "int64_t"
#     lscpu_flags: [ 'neon' ]
#     is_native: False
#     implementation: "return ( ( vec_mask[ 1 ] >> 62 ) & 0b10 ) | ( vec_mask[ 0 ] >> 63 );"
#...
