---
file_description: "TODO."
includes:
   - "<random>"
   - "<chrono>"
   - "<cstdint>"
   - "<cstddef>"
   - "<cstdlib>"
   - "<functional>"
   - "<algorithm>"
   - "<utility>"
   - "<type_traits>"
   - "<limits>"
   - '"catch.hpp"'
implementations:
  - |
      template<typename T>
      void rnd_init_bounded(
          T* data, std::size_t element_count, T min_inclusive, T max_inclusive
      ) {
          std::mt19937 engine(std::chrono::high_resolution_clock::now().time_since_epoch().count());
          using dist_type = std::conditional_t< std::is_floating_point_v<T>, std::uniform_real_distribution<T>, std::uniform_int_distribution<T>>;
          dist_type dist(min_inclusive, max_inclusive);
          for(std::size_t i = 0; i < element_count; ++i) {
            data[i] = dist(engine);
          }
      }
  - |
    template<typename T>
    void rnd_init(T* data, std::size_t element_count) {
        rnd_init_bounded(
            data,
            element_count,
            static_cast<T>(0),
            std::clamp<T>(static_cast<T>(1000), static_cast<T>(0), static_cast<T>(std::numeric_limits<T>::max() / 3))
        );
    }
  - |
      template<typename T>
      void alternate_init_no_zero(T* data, std::size_t element_count) {
          T max =
            static_cast<T>(
                std::clamp<size_t>(
                  element_count,
                  static_cast<size_t>(std::numeric_limits<T>::lowest()),
                  static_cast<size_t>(std::numeric_limits<T>::max())
                )
            );
          T val = (T)1;
          size_t pos = 0;
          for(size_t i = 0; i < element_count/2; ++i) {
            data[pos++] = val;
            if constexpr (std::is_signed_v<T>) {
                data[pos++] = -val;
                if constexpr (std::is_floating_point_v<T>) {
                  ++val;
                } else {
                  val = (++val%max) == 0 ? 1 : val;
                }
            } else {
                val = (++val%max) == 0 ? 1 : val;
                data[pos++] = val;
                val = (++val%max) == 0 ? 1 : val;
            }
          }
      }
  - |
      template<typename T>
      void alternate_init(T* data, std::size_t element_count) {
          T max =
            static_cast<T>(
                std::clamp<size_t>(
                  element_count,
                  static_cast<size_t>(std::numeric_limits<T>::lowest()),
                  static_cast<size_t>(std::numeric_limits<T>::max())
                )
            );
          T val = (T)1;
          data[0] = (T)0;
          size_t pos = 1;
          for(size_t i = 1; i < element_count/2; ++i) {
            data[pos++] = val;
            if constexpr (std::is_signed_v<T>) {
                data[pos++] = -val;
                if constexpr (std::is_floating_point_v<T>) {
                  ++val;
                } else {
                  val = (++val%max) == 0 ? 1 : val;
                }
            } else {
                val = (++val%max) == 0 ? 1 : val;
                data[pos++] = val;
                val = (++val%max) == 0 ? 1 : val;
            }
          }
      }
  - |
      template<typename T>
      void alternate_2value_init(T* data, std::size_t element_count, T val1, T val2) {
        for (auto i = 0; i < element_count; ++i) {
          if ((i%2) == 0) {
            data[i] = val1;
          } else {
            data[i] = val2;
          }
        }
      }
  - |
      template<typename T>
      void seq_init_start_0(T* data, std::size_t element_count) {
          for(std::size_t i = 0; i < element_count; ++i) {
            data[i] = i;
          }
      }
  - |
      template<typename T>
      void seq_init_start_low(T* data, std::size_t element_count) {
          T current_value = std::numeric_limits<T>::lowest();
          for(std::size_t i = 0; i < element_count; ++i) {
            data[i] = current_value++;
          }
      }
  - |
      template<typename T>
      void seq_init(T* data, std::size_t element_count, T start) {
          T current_value = start;
          for(std::size_t i = 0; i < element_count; ++i) {
            data[i] = current_value;
            current_value = current_value + (T)1;
          }
      }
  - |
      template<typename T>
      bool check_value(T base, T to_be_examined) {
          if constexpr(std::is_integral_v<T>) {
            if constexpr(std::is_unsigned_v<T>) {
                if(base >= to_be_examined) {
                  return ((base - to_be_examined) == std::numeric_limits<T>::epsilon());
                } else {
                  return ((to_be_examined - base) == std::numeric_limits<T>::epsilon());
                }
            } else {
                return (std::abs(static_cast<T>(base - to_be_examined)) == std::numeric_limits<T>::epsilon());
            }
          } else {
            if (std::isnan(base)) return std::isnan(to_be_examined);
            return (std::fabs(static_cast<T>(base - to_be_examined)) <= std::numeric_limits<T>::epsilon());
          }
      }
  - |
      template<VectorProcessingStyle Vec>
      class set_call_helper_t {
          private:
            template<std::size_t... Is>
            static auto call_set_impl(typename Vec::base_type const * data, std::index_sequence<Is...>) {
                return tsl::set<Vec>((typename Vec::base_type)data[(Vec::vector_element_count()-1)-Is]...);
            }
          public:
            static auto call_set(typename Vec::base_type const * data) {
                return call_set_impl(data, std::make_index_sequence<Vec::vector_element_count()>{});
            }
      };
  - |
      template<VectorProcessingStyle Vec, VectorProcessingStyle outVec = Vec>
      class test_memory_helper_t {
          public:
            using base_t = typename Vec::base_type;
            using result_t = typename outVec::base_type;
          private:
            std::size_t const m_data_element_count;
            std::size_t const m_result_count;
            base_t * const m_data_ref;
            base_t * const m_data_target;
            result_t * const m_result_ref;
            result_t * const m_result_target_for_ref;
            result_t * const m_result_target;
          public:
            explicit test_memory_helper_t(std::size_t p_result_count, bool aligned):
                m_data_element_count   {0},
                m_result_count         {p_result_count},
                m_data_ref             {nullptr},
                m_data_target          {nullptr},
                m_result_ref           {tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
                m_result_target_for_ref{tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
                m_result_target        {(aligned) ? tsl::allocate_aligned<Vec>(p_result_count*sizeof(result_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_result_count*sizeof(result_t))}
            {
                std::memset(reinterpret_cast<void*>(m_result_ref), 0, p_result_count*sizeof(result_t));
            }
            test_memory_helper_t(std::size_t p_data_element_count, std::size_t p_result_count, bool aligned, std::function<void(base_t*, std::size_t)> const& fun = rnd_init<typename Vec::base_type>):
                m_data_element_count   {p_data_element_count},
                m_result_count         {p_result_count},
                m_data_ref             {tsl::allocate<tsl::simd<base_t, tsl::scalar>>(p_data_element_count*sizeof(base_t))},
                m_data_target          {(aligned) ? tsl::allocate_aligned<Vec>(p_data_element_count*sizeof(base_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_data_element_count*sizeof(base_t))},
                m_result_ref           {tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
                m_result_target_for_ref{tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
                m_result_target        {(aligned) ? tsl::allocate_aligned<Vec>(p_result_count*sizeof(result_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_result_count*sizeof(result_t))}
            {
                fun(m_data_ref, p_data_element_count);
                tsl::memory_cp<Vec>(m_data_target, m_data_ref, p_data_element_count*sizeof(base_t), 1);
                std::memset(reinterpret_cast<void*>(m_result_ref), 0, p_result_count*sizeof(result_t));
            }
            template<typename... Ts>
            test_memory_helper_t(std::size_t p_data_element_count, std::size_t p_result_count, bool aligned, void (*fun)(base_t*, std::size_t, Ts...), Ts... init_args):
                m_data_element_count   {p_data_element_count},
                m_result_count         {p_result_count},
                m_data_ref             {tsl::allocate<tsl::simd<base_t, tsl::scalar>>(p_data_element_count*sizeof(base_t))},
                m_data_target          {(aligned) ? tsl::allocate_aligned<Vec>(p_data_element_count*sizeof(base_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_data_element_count*sizeof(base_t))},
                m_result_ref           {tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
                m_result_target_for_ref{tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
                m_result_target        {(aligned) ? tsl::allocate_aligned<Vec>(p_result_count*sizeof(result_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_result_count*sizeof(result_t))}
            {
                fun(m_data_ref, p_data_element_count, init_args...);
                tsl::memory_cp<Vec>(m_data_target, m_data_ref, p_data_element_count*sizeof(base_t), 1);
                std::memset(reinterpret_cast<void*>(m_result_ref), 0, p_result_count*sizeof(result_t));
            }
            template<typename... Ts>
            test_memory_helper_t(std::size_t p_data_element_count, std::size_t p_result_count, bool aligned, std::function<void(base_t*,std::size_t, base_t)> const & fun, base_t start):
              m_data_element_count   {p_data_element_count},
              m_result_count         {p_result_count},
              m_data_ref             {tsl::allocate<tsl::simd<base_t, tsl::scalar>>(p_data_element_count*sizeof(base_t))},
              m_data_target          {(aligned) ? tsl::allocate_aligned<Vec>(p_data_element_count*sizeof(base_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_data_element_count*sizeof(base_t))},
              m_result_ref           {tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
              m_result_target_for_ref{tsl::allocate<tsl::simd<result_t, tsl::scalar>>(p_result_count*sizeof(result_t))},
              m_result_target        {(aligned) ? tsl::allocate_aligned<Vec>(p_result_count*sizeof(result_t), Vec::vector_alignment()) : tsl::allocate<Vec>(p_result_count*sizeof(result_t))}
            {
              fun(m_data_ref, p_data_element_count, start);
              tsl::memory_cp<Vec>(m_data_target, m_data_ref, p_data_element_count*sizeof(base_t), 1);
              std::memset(reinterpret_cast<void*>(m_result_ref), 0, p_result_count*sizeof(result_t));
            }
            virtual ~test_memory_helper_t() {
                tsl::deallocate<outVec>(m_result_target);
                tsl::deallocate<tsl::simd<result_t, tsl::scalar>>(m_result_target_for_ref);
                tsl::deallocate<tsl::simd<result_t, tsl::scalar>>(m_result_ref);
                if(m_data_element_count > 0) {
                  tsl::deallocate<Vec>(m_data_target);
                  tsl::deallocate<tsl::simd<base_t, tsl::scalar>>(m_data_ref);
                }
            }
          public:
            auto data_ref() const { return m_data_ref; }
            auto data_target() const { return m_data_target; }
            auto result_ref() { return m_result_ref; }
            auto result_target() { return m_result_target; }
          public:
            void ship_to_dev() {
                tsl::memory_cp<Vec>(m_data_target, m_data_ref, m_data_element_count*sizeof(base_t), 1);
            }
            void synchronize() {
                tsl::memory_cp<outVec>(m_result_target_for_ref, m_result_target, m_result_count*sizeof(result_t), 2);
            }
            bool validate() const {
                bool result = true;
                for(auto i = 0; i < m_result_count; ++i) {
                  //std::cerr << m_result_ref[i] << " " << m_result_target_for_ref[i] << std::endl;
                  result &= check_value<result_t>(m_result_ref[i], m_result_target_for_ref[i]);
                }
                return result;
            }
            bool validate_simd_register(typename outVec::register_type reg) const {
                auto tmp_target_buf = tsl::allocate_aligned<outVec>(outVec::vector_size_B(), outVec::vector_alignment());
                auto tmp_reference_buf = tsl::allocate<tsl::simd<base_t, tsl::scalar>>(outVec::vector_size_B());
                if constexpr(outVec::register_type_is_pointer_v) {
                  tsl::memory_cp<outVec>(tmp_target_buf, reinterpret_cast<typename outVec::base_type const *>(reg), outVec::vector_size_B(), 3);
                } else {
                  tsl::memory_cp<outVec>(tmp_target_buf, reinterpret_cast<typename outVec::base_type const *>(&reg), outVec::vector_size_B(), 3);
                }
                tsl::memory_cp<outVec>(tmp_reference_buf, tmp_target_buf, outVec::vector_size_B(), 2);
                bool result = true;
                for(auto i = 0; i < outVec::vector_element_count(); ++i) {
                  bool ok = check_value<base_t>(tmp_reference_buf[i], m_result_ref[i]);
                  if (!ok) {
                    std::cerr << "Error in validate_simd_register: " << i << " " << tmp_reference_buf[i] << " " << m_result_ref[i] << std::endl;
                  }
                  result &= ok;
                }
                tsl::deallocate<tsl::simd<base_t, tsl::scalar>>(tmp_reference_buf);
                tsl::deallocate<outVec>(tmp_target_buf);
                return result;
            }
      };
...
