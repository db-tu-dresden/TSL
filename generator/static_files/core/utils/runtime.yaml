---
file_description: "Static header that defines the runtime."
includes:
  - "<cstdlib>"
  - "<cstddef>"
  - "<utility>"
implementations:
  - |
    struct MEMORY_ON_HOST{};
    struct MEMORY_ON_DEVICE{};

    template<class ExecTarget>
      class executor {
        private:
          ExecTarget target;
        public:
          template<typename... Args>
            executor(Args&&... args)
            : target{std::forward<Args>(args)...} 
            {}
        public:
          
          template<typename T, typename... Args>
            auto allocate(Args&& ... args) {
              return target.template allocate<T>(std::forward<Args>(args)...);
            }
          template<typename T>
            void deallocate(T ptr) {
              return target.deallocate(ptr);
            }
          template<typename OutT, typename InT>
            void copy(OutT out, InT in, size_t element_count) {
              target.copy(out, in, element_count);
            }
        public:
          template<class Functor, typename... Args>
            decltype(auto) submit(Functor& fun, Args... args) {
              return target.template submit<Functor>(fun, args...);
            }
          template<class Functor, typename... Args>
            decltype(auto) submit(Functor&& fun, Args... args) {
              return target.template submit<Functor>(std::forward<Functor>(fun), args...);
          }
          template<VectorProcessingStyle PS, template<typename...> class Fun, typename... Args>
            decltype(auto) submit(Args... args) {
              return target.template submit<PS, Fun>(args...);
            }
          template<template<typename...> class Fun, typename... Args>
            decltype(auto) submit(Args... args) {
              return target.template submit<Fun>(args...);
            }
          template<typename BaseT, int VectorLength, template<typename...> class Fun, typename... Args>
            decltype(auto) submit(Args... args) {
              return target.template submit<BaseT, VectorLength, Fun, Args...>(args...);
            }
          template<class Fun, typename... Args>
            decltype(auto) submit(Args... args) {
              return target.template submit<Fun>(args...);
            }

          template<VectorProcessingStyle PS, template<typename...> class Fun, typename... Args>
            decltype(auto) detach(Args... args) {
              return target.template detach<PS, Fun>(args...);
            }
          template<template<typename...> class Fun, typename... Args>
            decltype(auto) detach(Args... args) {
              return target.template detach<Fun>(args...);
            }
          template<typename BaseT, int VectorLength, template<typename...> class Fun, typename... Args>
            decltype(auto) detach(Args... args) {
              return target.template detach<BaseT, VectorLength, Fun, Args...>(args...);
            }
          template<class Fun, typename... Args>
            decltype(auto) detach(Args... args) {
              return target.template detach<Fun>(args...);
            }

          template<TSLArithmetic T>
          static constexpr auto available_parallelism() {
            return ExecTarget::template available_parallelism<T>();
          }

          void wait() {
            target.wait();
          }
      };
...